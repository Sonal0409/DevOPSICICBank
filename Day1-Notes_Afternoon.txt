
Notes : Day1 ==> Afternoon Batch

*************************
Scenario1: Create a Working Directory

# mkdir gitDemo
# cd gitDemo
# mkdir project
# cd project
- Working directory is ready

Initiating a Local repository in working directory

# git init
# ll -al

Local repository intiated in project working directory. Now all files in working directory will be tracked by git.

****************************
Scenario 2: Creating a new file and adding it to local repository

git config --global user.name username(github)

git config --global user.email emailid

# vim file1
# git status  // file is not tracked by git
# git add file1
# git status   // file is in stagging area and not commited yet
# git commit -m "commit file1"
# ls
# git ls-files   // file is now being tracked by GIT

Again one more example:

# vim file2
# git status  // file is not tracked by git
# git add file2
# git status   // file is in stagging area and not commited yet
# git commit -m "commit file2"
# ls
# git ls-files   // file is now being tracked by GIT
***************************
****************************************************
Scanrio 3: Check commit history or log

# git log  // will show the commit history in detail
# git log --oneline 
# git show commitid   // will show chnages happened in this commit

*****************************************************
Scenario4: COMMIT and ADD an Existing file

# vim file2   // open exisiting file and make chnages to it
# git status   // file is being tracked only chnages have to be commited
# git add file2
# git commit -m "modified file2"
*******************************************************
Scenario 5: Checking Unstagged chnages and stagged changes 

# vim file2   // open exisiting file and make chnages to it
# git diff file2   // will show chnages that are made to file2 when it is not stagged yet
# git add file2  // stage the file
# git diff --staged file2 // will show chnages that are made to file2 when file is in stagging area
# git commit -m "new chnages"

********************************************************
Scenario6: Deletion of file

- Deletion of file from WD & local repo

# git rm file1
# git status
# git commit -m "deletion of file1"
# ls
# git ls-files
***********************************************************

Scenario7: Ignoring Files

# vim log
# git status  // file untracked
# vim .gitignore   // add name of file "log" , which wil be noe ignored
# git status   // log will be ignored and .gitignore untracked
# git add .gitignore
# git commit -m "added ignore file"
# git status // working tress has to be clean

************************************************************
Scenario 8: Reverting the changes:

# vim file3  // create a new files
# git add file3
# git commit -m "added file3"

//Delete the file

# git rm file3
# git commit -m "deleted file3"
# ls
# git ls-files

# git log --oneline    // last commit id is of delete action, copy it
// lets revert the commit

# git revert commit id

// file back to WD and local
# ls
# git ls-files

***********************************
REMOTE REPOSITORY:

Create login and password of GITHUB

Create a new repository on the git hub

Copy the URL of the repository to  add local repo to external repo:

# git remote add origin URL of externalrepo

# git remote -v // will show that origin is mapped to external repo url

PUSH files of master into external repo
# git branch ==> checkout on master branch
# git push origin master ==> pushes master files to origin(external repo)
Username: 
Passowrd: 
For password create Personal Access token in GITHUB
//Now go to external repo and see all the files of master will be available

***************************
PULL files from external repo to local repo
***************************************************
Create files from github and pull the file into local repo

# git pull origin 
# ls ==> new file will be there

Fetch files from external repo to local repo
******************************************************
Create a new file on external repo 

# git fetch origin master





